// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Trivo.Infraestructura.Persistencia.Contexto;

#nullable disable

namespace Trivo.Infraestructura.Persistencia.Migrations
{
    [DbContext(typeof(TrivoContexto))]
    [Migration("20250720192022_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Trivo.Dominio.Modelos.Administrador", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkAdministradorId");

                    b.Property<bool?>("Activo")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Biografia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContrasenaHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FotoPerfil")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Linkedin")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PKAdministradorId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UQAdministradorEmail");

                    b.HasIndex("NombreUsuario")
                        .IsUnique()
                        .HasDatabaseName("UQAdministradorNombreUsuario");

                    b.ToTable("Administrador", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.CategoriaInteres", b =>
                {
                    b.Property<Guid?>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkCategoriaId");

                    b.Property<Guid?>("InteresId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("CategoriaId")
                        .HasName("PKCategoriaInteresId");

                    b.HasIndex("InteresId");

                    b.ToTable("CategoriaInteres", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Chat", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkChatId");

                    b.Property<bool?>("Activo")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MensajeId")
                        .HasColumnType("uuid");

                    b.Property<string>("TipoChat")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PkChatId");

                    b.HasIndex("MensajeId");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.ChatUsuario", b =>
                {
                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkChatId");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuariosId");

                    b.Property<DateTime?>("FechaIngreso")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaSalida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreChat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ChatId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ChatUsuario", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Codigo", b =>
                {
                    b.Property<Guid?>("CodigoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkCodigoId");

                    b.Property<DateTime?>("Creado")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Expiracion")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("RefrescarCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("Revocado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Usado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuariosId");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CodigoId")
                        .HasName("PKCodigoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Codigo", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Emparejamiento", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkEmparejamientoId");

                    b.Property<string>("EmparejamientoEstado")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExpertoEstado")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("ExpertoId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkExpertoId");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReclutadorEstado")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("ReclutadorId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkReclutadorId");

                    b.HasKey("Id")
                        .HasName("PKEmparejamientoId");

                    b.HasIndex("ExpertoId");

                    b.HasIndex("ReclutadorId");

                    b.ToTable("Emparejamiento", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Experto", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkExpertoId");

                    b.Property<bool?>("Contratado")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("DisponibleParaProyectos")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuariosId");

                    b.HasKey("Id")
                        .HasName("PKExpertoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Experto", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Habilidad", b =>
                {
                    b.Property<Guid?>("HabilidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkHabilidadId");

                    b.Property<DateTime?>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("HabilidadId")
                        .HasName("PKHabilidadId");

                    b.ToTable("Habilidad", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Interes", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkInteresId");

                    b.Property<Guid?>("CategoriaId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkCategoriaId");

                    b.Property<Guid?>("CreadoPor")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkCreadoPorId");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PKInteresId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CreadoPor");

                    b.ToTable("Interes", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Mensaje", b =>
                {
                    b.Property<Guid?>("MensajeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkChatId");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EmisorId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkEmisorId");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FechaEnvio")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MensajeId")
                        .HasName("PKMensajeId");

                    b.HasIndex("ChatId");

                    b.HasIndex("EmisorId");

                    b.ToTable("Mensaje", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Notificacion", b =>
                {
                    b.Property<Guid?>("NotificacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkNotificacionId");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("FechaCreacion")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaLeida")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Leida")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuariosId");

                    b.HasKey("NotificacionId")
                        .HasName("PKNotificacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Notificacion", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Reclutador", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkReclutadorId");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreEmpresa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuariosId");

                    b.HasKey("Id")
                        .HasName("PKReclutadorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Reclutador", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Reporte", b =>
                {
                    b.Property<Guid?>("ReporteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkReporteId");

                    b.Property<string>("EstadoReporte")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("MensajeId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkMensajeId");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ReportadoPor")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("FkReportadoPorId");

                    b.HasKey("ReporteId")
                        .HasName("PKReporteId");

                    b.HasIndex("MensajeId");

                    b.HasIndex("ReportadoPor");

                    b.ToTable("Reporte", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Usuario", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkUsuarioId");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Biografia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContrasenaHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("CuentaConfirmada")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EstadoUsuario")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaRegistro")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FotoPerfil")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Linkedin")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Ubicacion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PKUsuarioId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UQUsuariosEmail");

                    b.HasIndex("NombreUsuario")
                        .IsUnique()
                        .HasDatabaseName("UQUsuariosNombreUsuario");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.UsuarioHabilidad", b =>
                {
                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuariosId");

                    b.Property<Guid?>("HabilidadId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkHabilidadId");

                    b.HasKey("UsuarioId", "HabilidadId");

                    b.HasIndex("HabilidadId");

                    b.ToTable("UsuarioHabilidad", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.UsuarioInteres", b =>
                {
                    b.Property<Guid?>("InteresId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkInteresId");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuariosId");

                    b.HasKey("InteresId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioInteres", (string)null);
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.CategoriaInteres", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Interes", null)
                        .WithMany("Categorias")
                        .HasForeignKey("InteresId");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Chat", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Mensaje", null)
                        .WithMany("Chats")
                        .HasForeignKey("MensajeId");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.ChatUsuario", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Chat", "Chat")
                        .WithMany("ChatUsuarios")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKChatId");

                    b.HasOne("Trivo.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("ChatUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKUsuariosId");

                    b.Navigation("Chat");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Codigo", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Usuario", "Usuarios")
                        .WithMany("Codigos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKUsuariosId");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Emparejamiento", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Experto", "Experto")
                        .WithMany("Emparejamientos")
                        .HasForeignKey("ExpertoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKExpertoId");

                    b.HasOne("Trivo.Dominio.Modelos.Reclutador", "Reclutador")
                        .WithMany("Emparejamientos")
                        .HasForeignKey("ReclutadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKReclutadorId");

                    b.Navigation("Experto");

                    b.Navigation("Reclutador");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Experto", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("Expertos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKUsuariosId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Interes", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.CategoriaInteres", "Categoria")
                        .WithMany("Interes")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKCategoriaId");

                    b.HasOne("Trivo.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("Interes")
                        .HasForeignKey("CreadoPor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKCreadoPorId");

                    b.Navigation("Categoria");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Mensaje", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Chat", "Chat")
                        .WithMany("Mensajes")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKMensajeChat");

                    b.HasOne("Trivo.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("Mensajes")
                        .HasForeignKey("EmisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKEmisorId");

                    b.Navigation("Chat");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Notificacion", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKUsuariosId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Reclutador", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("Reclutadores")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKUsuariosId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Reporte", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Mensaje", "Mensaje")
                        .WithMany("Reportes")
                        .HasForeignKey("MensajeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKMensajeId");

                    b.HasOne("Trivo.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("Reportes")
                        .HasForeignKey("ReportadoPor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKReportadoPorId");

                    b.Navigation("Mensaje");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.UsuarioHabilidad", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Habilidad", "Habilidad")
                        .WithMany("UsuarioHabilidades")
                        .HasForeignKey("HabilidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKHabilidadId");

                    b.HasOne("Trivo.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("UsuarioHabilidades")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKUsuariosId");

                    b.Navigation("Habilidad");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.UsuarioInteres", b =>
                {
                    b.HasOne("Trivo.Dominio.Modelos.Interes", "Interes")
                        .WithMany("UsuarioInteres")
                        .HasForeignKey("InteresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKInteresId");

                    b.HasOne("Trivo.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("UsuarioInteres")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKUsuariosId");

                    b.Navigation("Interes");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.CategoriaInteres", b =>
                {
                    b.Navigation("Interes");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Chat", b =>
                {
                    b.Navigation("ChatUsuarios");

                    b.Navigation("Mensajes");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Experto", b =>
                {
                    b.Navigation("Emparejamientos");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Habilidad", b =>
                {
                    b.Navigation("UsuarioHabilidades");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Interes", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("UsuarioInteres");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Mensaje", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Reportes");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Reclutador", b =>
                {
                    b.Navigation("Emparejamientos");
                });

            modelBuilder.Entity("Trivo.Dominio.Modelos.Usuario", b =>
                {
                    b.Navigation("ChatUsuarios");

                    b.Navigation("Codigos");

                    b.Navigation("Expertos");

                    b.Navigation("Interes");

                    b.Navigation("Mensajes");

                    b.Navigation("Notificaciones");

                    b.Navigation("Reclutadores");

                    b.Navigation("Reportes");

                    b.Navigation("UsuarioHabilidades");

                    b.Navigation("UsuarioInteres");
                });
#pragma warning restore 612, 618
        }
    }
}
